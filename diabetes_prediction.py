# -*- coding: utf-8 -*-
"""Diabetes_prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/162RH41wJm2e4Emu5noqwloE-x_ta24-p
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
import pickle

df = pd.read_csv('/content/diabetes.csv')
df.head()

X = df.drop(columns=['Outcome'])
y = df['Outcome']

X_tr,X_te,y_tr,y_te = train_test_split(X,y,test_size=0.2,stratify = y,random_state=2)

print('training_data shape', X_tr.shape,y_tr.shape)
print('testing_data shape', X_te.shape,y_te.shape)

scaler = StandardScaler()
X_trained_scaled = scaler.fit_transform(X_tr)
X_test_scaled = scaler.transform(X_te)

model = LogisticRegression()
model.fit(X_trained_scaled,y_tr)

y_pred = model.predict(X_test_scaled)
accuracy = accuracy_score(y_te,y_pred)
print("Test Accuracy: ",round(accuracy,2))

with open('disease_model.pkl','wb') as model_file:
  pickle.dump(model,model_file)

with open('scaler.pkl','wb') as scaler_file:
  pickle.dump(scaler,scaler_file)

"""Code for Prediction"""

import pickle
import numpy as np

with open('disease_model.pkl','rb') as model_file:
  loaded_model = pickle.load(model_file)

with open('scaler.pkl','rb') as scaler_file:
  loaded_scaler = pickle.load(scaler_file)

dataset_row = X.iloc[3]
dataset_row
# Convert the row into a numpy array
numpy_array = dataset_row.to_numpy()
numpy_array

scaled_data = loaded_scaler.transform([numpy_array])
scaled_data

prediction = loaded_model.predict(scaled_data)
prediction

if prediction[0] == 1:
  print('diabetic')
else:
  print('Non-diabetic')

